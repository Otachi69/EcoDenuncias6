# Generated by Django 5.2.7 on 2025-10-21 19:37

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dependencias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_dependencia', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Municipios',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_municipio', models.CharField(choices=[('Almaguer', 'Almaguer'), ('Argelia', 'Argelia'), ('Balboa', 'Balboa'), ('Bolívar', 'Bolívar'), ('Buenos Aires', 'Buenos Aires'), ('Cajibío', 'Cajibío'), ('Caldono', 'Caldono'), ('Caloto', 'Caloto'), ('Corinto', 'Corinto'), ('El Tambo', 'El Tambo'), ('Florencia', 'Florencia'), ('Guachené', 'Guachené'), ('Guapi', 'Guapi'), ('Inzá', 'Inzá'), ('Jambaló', 'Jambaló'), ('La Sierra', 'La Sierra'), ('La Vega', 'La Vega'), ('López de Micay', 'López de Micay'), ('Mercaderes', 'Mercaderes'), ('Miranda', 'Miranda'), ('Morales', 'Morales'), ('Padilla', 'Padilla'), ('Páez', 'Páez'), ('Patía', 'Patía'), ('Piamonte', 'Piamonte'), ('Piendamó', 'Piendamó'), ('Popayán', 'Popayán'), ('Puerto Tejada', 'Puerto Tejada'), ('Puracé', 'Puracé'), ('Rosas', 'Rosas'), ('San Sebastián', 'San Sebastián'), ('Santander de Quilichao', 'Santander de Quilichao'), ('Santa Rosa', 'Santa Rosa'), ('Silvia', 'Silvia'), ('Sotará', 'Sotará'), ('Suárez', 'Suárez'), ('Sucre', 'Sucre'), ('Timbío', 'Timbío'), ('Timbiquí', 'Timbiquí'), ('Toribío', 'Toribío'), ('Totoró', 'Totoró'), ('Villa Rica', 'Villa Rica')], max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Respuestas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_respuesta', models.DateField(auto_now_add=True)),
                ('descripcion_respuesta', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_rol', models.CharField(choices=[('usuario', 'usuario'), ('admin', 'admin'), ('funcionario', 'funcionario')], unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Territoriales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_territorial', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Usuarios',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=200, unique=True)),
                ('identificacion', models.CharField(max_length=12, unique=True)),
                ('telefono', models.CharField(max_length=15, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Funcionarios',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('es_jefe', models.BooleanField(default=False)),
                ('dependencia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.dependencias')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Requerimientos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_requerimiento', models.CharField(choices=[('denuncia', 'denuncia'), ('solicitud', 'solicitud')], max_length=50, unique=True)),
                ('estado', models.CharField(choices=[('pendiente', 'pendiente'), ('en_proceso', 'en_proceso'), ('resuelto', 'resuelto')], default='pendiente', max_length=20)),
                ('radicado', models.CharField(max_length=10, unique=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Denuncias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_delito', models.CharField(choices=[('Aprovechamiento ilícito de los recursos naturales renovables', 'Aprovechamiento ilícito de los recursos naturales renovables'), ('Tráfico de fauna', 'Tráfico de fauna'), ('Caza ilegal', 'Caza ilegal'), ('Pesca ilegal', 'Pesca ilegal'), ('Manejo ilícito de especies exóticas', 'Manejo ilícito de especies exóticas'), ('Deforestación', 'Deforestación'), ('Promoción y financiación de la deforestación', 'Promoción y financiación de la deforestación'), ('Manejo y uso ilícito de organismos genéticamente modificados, microorganismos y sustancias o elementos peligrosos', 'Manejo y uso ilícito de organismos genéticamente modificados, microorganismos y sustancias o elementos peligrosos'), ('Explotación ilícita de yacimiento minero y otros materiales', 'Explotación ilícita de yacimiento minero y otros materiales'), ('Contaminación ambiental', 'Contaminación ambiental'), ('Impacto ambiental grave', 'Impacto ambiental grave'), ('Daños en los recursos naturales y ecocidio', 'Daños en los recursos naturales y ecocidio'), ('Invasión de Áreas de Especial Importancia Ecológica (AEIE)', 'Invasión de Áreas de Especial Importancia Ecológica (AEIE)'), ('Financiación de invasión de Áreas de Especial Importancia Ecológica (AEIE)', 'Financiación de invasión de Áreas de Especial Importancia Ecológica (AEIE)')])),
                ('descripcion_delito', models.TextField()),
                ('fecha_delito', models.DateField()),
                ('municipio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.municipios')),
                ('requerimiento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.requerimientos')),
            ],
        ),
        migrations.CreateModel(
            name='Multimedias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('multimedia', models.CharField(choices=[('imagen', 'imagen'), ('video', 'video'), ('archivo', 'archivo')])),
                ('nombre_archivo', models.FileField(upload_to='multimedias/')),
                ('requerimiento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.requerimientos')),
                ('respuesta', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.respuestas')),
            ],
        ),
        migrations.CreateModel(
            name='Seguimientos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_seguimiento', models.DateField()),
                ('actualizacion_reciente', models.DateTimeField(auto_now=True)),
                ('dias_abierta', models.IntegerField()),
                ('descripcion_actualizacion', models.TextField()),
                ('tiempo_limite', models.DateField()),
                ('funcionario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.funcionarios')),
                ('requerimiento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.requerimientos')),
            ],
        ),
        migrations.AddField(
            model_name='respuestas',
            name='seguimiento',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.seguimientos'),
        ),
        migrations.CreateModel(
            name='Solicitudes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_solicitud', models.CharField(choices=[('Solicitud de inspección ambiental', 'Solicitud de inspección ambiental'), ('Solicitud de seguimiento y control de vertimientos', 'Solicitud de seguimiento y control de vertimientos'), ('Solicitud de reparación integral del daño ambiental', 'Solicitud de reparación integral del daño ambiental'), ('Solicitud de remediación de suelos contaminados', 'Solicitud de remediación de suelos contaminados'), ('Solicitud de mitigación de fuentes contaminantes', 'Solicitud de mitigación de fuentes contaminantes'), ('Solicitud de suspensión de actividades mineras ilegales', 'Solicitud de suspensión de actividades mineras ilegales'), ('Solicitud de protección de fuentes de agua', 'Solicitud de protección de fuentes de agua'), ('Solicitud de reforestación en zona afectada', 'Solicitud de reforestación en zona afectada'), ('Solicitud de compensación ambiental', 'Solicitud de compensación ambiental'), ('Solicitud de transparecia e información sobre impacto ambiental', 'Solicitud de transparencia e información sobre impacto ambiental')])),
                ('descripcion_solicitud', models.TextField()),
                ('fecha_solicitud', models.DateField()),
                ('municipio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.municipios')),
                ('requerimiento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.requerimientos')),
            ],
        ),
        migrations.AddField(
            model_name='municipios',
            name='territorial',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.territoriales'),
        ),
        migrations.AddField(
            model_name='dependencias',
            name='territorial',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.territoriales'),
        ),
        migrations.CreateModel(
            name='UsuarioRoles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado_usuario_rol', models.CharField(choices=[('activo', 'activo'), ('inactivo', 'inactivo')], default='activo', max_length=10)),
                ('rol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appEcoDenuncias.roles')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
